/-
Copyright (c) 2022 Mar√≠a In√©s de Frutos-Fern√°ndez. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mar√≠a In√©s de Frutos-Fern√°ndez
-/
import number_theory.padics.padic_norm
import basic
import order.filter.basic
import analysis.special_functions.log.base
import data.nat.digits

open_locale big_operators

/-!
# Ostrowski's theorem for ‚Ñö

## References
* https://kconrad.math.uconn.edu/blurbs/gradnumthy/ostrowskinumbfield.pdf

## Tags
ring_norm, ostrowski
-/

noncomputable theory

section real

/-- The usual absolute value on ‚Ñö. -/
def ring_norm.real : ring_norm ‚Ñö :=
{ to_fun    := Œª x : ‚Ñö, |x|,
  map_zero' := by simp only [rat.cast_zero, abs_zero],
  add_le'   := norm_add_le,
  neg'      := norm_neg,
  eq_zero_of_map_eq_zero' := 
  by simp only [abs_eq_zero, rat.cast_eq_zero, imp_self, forall_const],
  mul_le'   := norm_mul_le }

@[simp] lemma ring_norm_eq_abs (r : ‚Ñö) : ring_norm.real r = |r| := rfl

lemma ring_norm.real_mul_eq : mul_eq ring_norm.real :=
by simp only [mul_eq_def, abs_mul, ring_norm_eq_abs, rat.cast_mul, eq_self_iff_true, forall_const]

end real

section padic

/-- The p-adic norm on ‚Ñö. -/
def ring_norm.padic (p : ‚Ñï) [hp : fact (nat.prime p)] : ring_norm ‚Ñö :=
{ to_fun    := Œª x : ‚Ñö, (padic_norm p x: ‚Ñù),
  map_zero' := by simp only [padic_norm.zero, rat.cast_zero],
  add_le'   := by norm_cast; exact padic_norm.triangle_ineq,
  neg'      := by simp only [padic_norm.neg, eq_self_iff_true, forall_const],
  eq_zero_of_map_eq_zero' := by norm_cast; exact @padic_norm.zero_of_padic_norm_eq_zero p _,
  mul_le'   := by simp only [padic_norm.mul, le_refl, forall_const, rat.cast_mul], }

@[simp] lemma ring_norm_eq_padic_norm (p : ‚Ñï) [hp : fact (nat.prime p)] (r : ‚Ñö) :
  ring_norm.padic p r = padic_norm p r := rfl

lemma ring_norm.padic_mul_eq (p : ‚Ñï) [hp : fact (nat.prime p)] :
  mul_eq (@ring_norm.padic p hp) :=
by simp only [mul_eq_def, ring_norm_eq_padic_norm, padic_norm.mul, rat.cast_mul,
  eq_self_iff_true, forall_const]

lemma ring_norm.padic_is_nonarchimedean (p : ‚Ñï) [hp : fact (nat.prime p)] :
  is_nonarchimedean (@ring_norm.padic p hp) :=
begin
  simp only [is_nonarchimedean_def, ring_norm_eq_padic_norm],
  norm_cast,
  exact @padic_norm.nonarchimedean p _,
end

end padic

variables {f : ring_norm ‚Ñö}

lemma norm_one_eq_one (h : mul_eq f) : f 1 = 1 := 
begin
  have H‚ÇÅ : (f 1)*(f 1) = f 1,
  calc
    (f 1)*(f 1) = f (1 * 1) : by rw ‚Üêh 1 1
    ... = f 1 : by norm_num,
  have H‚ÇÇ : f 1 ‚â† 0,
  { intro f10,
    have : (1 : ‚Ñö) = 0 := f.eq_zero_of_map_eq_zero' 1 f10,
    linarith },
    calc f 1 = (f 1) * (f 1) * (f 1)‚Åª¬π : by field_simp
    ... = (f 1) * (f 1)‚Åª¬π : by rw H‚ÇÅ
    ... = 1 : by field_simp,
end

lemma norm_neg_one_eq_one (h : mul_eq f) : f (-1) = 1 :=
begin
  have H‚ÇÅ : f (-1) * f (-1) = 1,
  calc
    f (-1) * f (-1)  = f ((-1) * (-1)) : by rw ‚Üêh (-1) (-1)
    ... = f 1 : by norm_num
    ... = 1 : norm_one_eq_one h,
  have H‚ÇÇ: f (-1) ‚â• 0 := map_nonneg f (-1),
  rw mul_self_eq_one_iff at H‚ÇÅ,
  cases H‚ÇÅ,
  { exact H‚ÇÅ },
  { rw H‚ÇÅ at H‚ÇÇ,
    have h' : ¬¨(-1 ‚â• (0 : ‚Ñù)) := by norm_num,
    contradiction },
end

lemma norm_pos_of_ne_zero {x : ‚Ñö} (h : x ‚â† 0) : f x > 0 :=
lt_of_le_of_ne (map_nonneg f x) (Œª h', h (f.eq_zero_of_map_eq_zero' x h'.symm))

--TODO: generalise to division rings, get rid of field_simp
lemma ring_norm.div_eq (h : mul_eq f) (p : ‚Ñö) {q : ‚Ñö} (hq : q ‚â† 0) : f (p / q) = (f p) / (f q) :=
begin
  have H : f q ‚â† 0,
  { intro fq0,
    have := f.eq_zero_of_map_eq_zero' q fq0,
    exact hq this },
  calc f (p / q) = f (p / q) * f q / f q : by field_simp
  ... = f (p / q * q)  / f q : by rw h (p / q) q
  ... = f p / f q : by field_simp,
end

section non_archimedean

lemma nat_norm_le_one (n : ‚Ñï) (heq : mul_eq f) (harc : is_nonarchimedean f) : f n ‚â§ 1 :=
begin
  induction n with c hc,
  { simp only [nat.cast_zero, map_zero, zero_le_one], },
  { rw nat.succ_eq_add_one,
    specialize harc c 1,
    rw norm_one_eq_one heq at harc,
    simp only [nat.cast_add, nat.cast_one],
    exact le_trans harc (max_le hc rfl.ge), },
end

lemma int_norm_bound_iff_nat_norm_bound (heq : mul_eq f) : (‚àÄ n : ‚Ñï, f n ‚â§ 1) ‚Üî (‚àÄ z : ‚Ñ§, f z ‚â§ 1) :=
begin
  split,
  { intros h z,
    obtain ‚ü®n, rfl | rfl‚ü© := z.eq_coe_or_neg,
    { exact h n },
    { have : ‚Üë((-1 : ‚Ñ§) * n) = (-1 : ‚Ñö) * n := by norm_cast,
      rw [neg_eq_neg_one_mul, this, heq, norm_neg_one_eq_one heq, one_mul],
      exact h n } },
  { intros h n,
    exact_mod_cast (h n) },
end

lemma int_norm_le_one (z : ‚Ñ§) (heq : mul_eq f) (harc : is_nonarchimedean f) : f z ‚â§ 1 :=
(int_norm_bound_iff_nat_norm_bound heq).mp (Œª n, nat_norm_le_one n heq harc) z

-- Proof strategy:

-- Prove nontrivial on ‚Ñö implies nontrivial on ‚Ñï
lemma nat_nontriv_of_rat_nontriv (hf_mul : mul_eq f) (harc : is_nonarchimedean f) : f ‚â† 1 ‚Üí (‚àÉ n : ‚Ñï, n ‚â† 0 ‚àß f n < 1) := 
begin
  contrapose!,
  intro hfnge1,
  have hfnateq1 : ‚àÄ n : ‚Ñï, n ‚â† 0 ‚Üí f n = 1,
  { intros n hnneq0,
    specialize hfnge1 n hnneq0,
    have := nat_norm_le_one n hf_mul harc,
    linarith },
  ext,
  by_cases h : x = 0,
  { simp only [h, map_zero]},
  { simp only [h, ring_norm.apply_one, if_false],
    rw ‚Üê rat.num_div_denom x,
    have hdenomnon0 : (x.denom : ‚Ñö) ‚â† 0,
    { norm_cast,
      linarith [x.pos] }, --probably rw on x.pos
    rw ring_norm.div_eq hf_mul (x.num : ‚Ñö) hdenomnon0,
    have H‚ÇÅ : f x.num = 1,
    { have pos_num_f_eq_1 : ‚àÄ a : ‚Ñö , (a.num > 0 ‚Üí f a.num = 1),
      { intros a num_pos,
        have coe_eq : (a.num : ‚Ñö) = (a.num.to_nat : ‚Ñö),
      { norm_cast,
        exact (int.to_nat_of_nonneg (by linarith)).symm, },
      rw coe_eq,
      /-have x_num_pos : x.num > 0,
      { apply lt_of_le_of_ne hsign,
        intro H,
        apply h,
        rw rat.zero_iff_num_zero,
        rw H },-/
      have a_num_nat_nonzero : a.num.to_nat ‚â† 0,
      { intro H,
        rw int.to_nat_eq_zero at H,
        linarith },
      exact hfnateq1 _ a_num_nat_nonzero },
      by_cases hsign : x.num ‚â• 0,
      { apply pos_num_f_eq_1,
        rw [rat.zero_iff_num_zero, ‚Üêne.def] at h,
        exact lt_of_le_of_ne hsign h.symm },
      { push_neg at hsign,
        rw ‚Üêf.to_fun_eq_coe,
        rw ‚Üêf.neg' x.num,
        rw f.to_fun_eq_coe,
        norm_cast,
        rw ‚Üêrat.num_neg_eq_neg_num,
        apply pos_num_f_eq_1, 
        rw rat.num_neg_eq_neg_num,
        exact neg_pos.mpr hsign} },
    have H‚ÇÇ : f x.denom = 1,
    { have := x.pos,
      rw pos_iff_ne_zero at this,
      exact hfnateq1 x.denom this },
    rw [H‚ÇÅ, H‚ÇÇ],
    norm_num }
end

def ring_norm.to_monoid_hom (f : ring_norm ‚Ñö) (hf : mul_eq f) : monoid_hom ‚Ñö ‚Ñù :=
{ to_fun   := f,
  map_one' := norm_one_eq_one hf,
  map_mul' := hf }

-- I couldn't find this lemma in mathlib. A similar version in mathlib is `one_le_prod_of_one_le`.
lemma real.one_le_prod_of_one_le {l : list ‚Ñù} (hl : ‚àÄ x : ‚Ñù, x ‚àà l ‚Üí 1 ‚â§ x) : 1 ‚â§ l.prod :=
begin
  induction l with a l ih,
  { simp only [list.prod_nil], },
  { simp only [list.prod_cons],
    have goal := (ih $ Œª a ha, hl a $ list.mem_cons_of_mem _ ha),
    have goal1 := (hl _ $ list.mem_cons_self _ _),
    nlinarith, },
end

-- Show that there is a prime with norm < 1
lemma ex_prime_norm_lt_one (heq : mul_eq f) (harc : is_nonarchimedean f) 
  (h : f ‚â† 1) : ‚àÉ (p : ‚Ñï) [hp : fact (nat.prime p)], f p < 1 :=
begin
  by_contra',
  obtain ‚ü®n, hn1, hn2‚ü© := nat_nontriv_of_rat_nontriv heq harc h,
  rw ‚Üê nat.prod_factors hn1 at hn2,
  have exp : ‚àÄ q : ‚Ñï, q ‚àà nat.factors n ‚Üí 1 ‚â§ f q,
  { intros q hq,
    letI : fact (nat.prime q) := {out := nat.prime_of_mem_factors hq},
    specialize this q,
    exact this, },
  simp only [nat.cast_list_prod] at hn2,
  have hf_mh: f.to_fun = (f.to_monoid_hom heq).to_fun := rfl,
  rw [‚Üê f.to_fun_eq_coe, hf_mh, (f.to_monoid_hom heq).to_fun_eq_coe, map_list_prod] at hn2,
  simp only [list.map_map] at hn2,
  have h : ‚àÄ (x ‚àà (list.map ((f.to_monoid_hom heq) ‚àò (coe : ‚Ñï ‚Üí ‚Ñö)) n.factors)), 1 ‚â§ x,
  { intros x hx,
    simp only [list.mem_map, function.comp_app] at hx,
    rcases hx with ‚ü®a, ha1, ha2‚ü©,
    letI : fact (nat.prime a) := {out := nat.prime_of_mem_factors ha1},
    specialize exp a ha1,
    rw ‚Üê ha2,
    convert exp, },
  have goal := real.one_le_prod_of_one_le h,
  linarith,
end

lemma prime_triv_nat_triv (heq : mul_eq f) (harc : is_nonarchimedean f) 
  (H : ‚àÄ p : ‚Ñï , p.prime ‚Üí f p = 1) : ‚àÄ n : ‚Ñï, n ‚â† 0 ‚Üí f n = 1 :=
begin
  intros n n_pos,
  induction n using nat.strong_induction_on with n hn,
  by_cases nge2 : n < 2,
  { interval_cases n,
    { exfalso, apply n_pos, refl },
    { exact norm_one_eq_one heq } },
  { push_neg at hn,
    have : n ‚â† 1,
    { intro H,
      rw H at nge2,
      apply nge2,
      norm_num },
    obtain ‚ü®p, p_prime, p_div‚ü© := nat.exists_prime_and_dvd this,
    obtain ‚ü®k, hk‚ü© := p_div,
    rw hk,
    rw nat.cast_mul,
    rw heq,
    rw H p p_prime,
    rw one_mul,
    have k_pos : k ‚â† 0,
    { intro k_zero, apply n_pos, rw hk, rw k_zero, rw mul_zero },
    have kltn : k < n,
    { have := nat.prime.two_le p_prime,
      rw hk,
      have ineq1 : 2*k ‚â§ p*k,
      { exact mul_le_mul_right' this k },
      have ineq2 : k < 2 * k,
      { nth_rewrite 0 ‚Üêone_mul k,
        have : 0 < k,
        { exact zero_lt_iff.mpr k_pos },
        apply (mul_lt_mul_right this).mpr,
        norm_num, },
      exact lt_of_lt_of_le ineq2 ineq1 },
    exact hn k kltn k_pos }
end

-- Show that ùîû is an ideal
def ùîû (harc : is_nonarchimedean f) (heq : mul_eq f) : ideal ‚Ñ§ :=
{ carrier := {a : ‚Ñ§ | f a < 1},
  add_mem' := begin
     intros a b ha hb,
     simp only [set.mem_set_of_eq, int.cast_add],
     have : max (f a) (f b) < 1 := max_lt ha hb,
     linarith [harc a b]
  end,
  zero_mem' := begin
    change f 0 < 1,
    rw [map_zero f],
    exact zero_lt_one,
  end,
  smul_mem' := begin
    intros a b hb,
    change f (‚Üë(a * b)) < 1,
    simp only [int.cast_mul],
    rw heq,
    exact mul_lt_of_le_of_lt_one' (int_norm_le_one a heq harc) hb (map_nonneg f b) zero_lt_one,
  end }

lemma a_proper (harc : is_nonarchimedean f) (heq : mul_eq f) : ùîû harc heq ‚â† (‚ä§ : ideal ‚Ñ§) :=
begin
  intro h,
  have : (1 : ‚Ñ§) ‚àâ (ùîû harc heq),
  { 
    unfold ùîû,
    simp only [submodule.mem_mk, set.mem_set_of_eq, int.cast_one, not_lt],
    exact (norm_one_eq_one heq).ge,
  },
  rw h at this,
  apply this,
  exact trivial,
end

-- Show that it contains pZ
lemma a_contains_prime_ideal (harc : is_nonarchimedean f) (heq : mul_eq f) (h_nontriv : f ‚â† 1) :
  ‚àÉ (p : ‚Ñï) [hp : fact (nat.prime p)], ùîû harc heq ‚â• ideal.span {p} :=
begin
  obtain ‚ü®p, hp, hbound‚ü© := ex_prime_norm_lt_one heq harc h_nontriv,
  use p,
  split, { exact hp },
  { apply ideal.span_le.mpr,
    intros ppr hp,
    unfold ùîû,
    simp only [set.mem_singleton_iff] at hp,
    simp only [submodule.coe_set_mk, set.mem_set_of_eq],
    rw hp,
    exact hbound }
end

-- Show that it's in fact equal to pZ (since pZ is a maximal ideal)
lemma a_eq_prime_ideal (harc : is_nonarchimedean f) (heq : mul_eq f) (h_nontriv : f ‚â† 1) :
  ‚àÉ (p : ‚Ñï) [hp : fact (nat.prime p)], ùîû harc heq = ideal.span {p} :=
begin
  obtain ‚ü®p, hp, hinc‚ü© := a_contains_prime_ideal harc heq h_nontriv,
  use p,
  split, { exact hp },
  cases hp,
  have h_irr : irreducible (p : ‚Ñ§) := (nat.prime_iff_prime_int.mp hp).irreducible,
  have hmax : ideal.is_maximal (ideal.span ({p} : set ‚Ñ§)) :=
    principal_ideal_ring.is_maximal_of_irreducible h_irr,
  symmetry,
  exact hmax.eq_of_le (a_proper harc heq) hinc,
end

lemma mult_finite {a : ‚Ñ§} {p : ‚Ñï} (hp : nat.prime p) (ha : a ‚â† 0) :
  multiplicity.finite (p : ‚Ñ§) a :=
begin
  apply multiplicity.finite_int_iff.mpr,
  simp only [ha, hp.ne_one, int.nat_abs_of_nat, ne.def, not_false_iff, and_self],
end

lemma mul_eq_pow (heq : mul_eq f) {a : ‚Ñö} {n : ‚Ñï} : f (a ^ n) = (f a) ^ n :=
begin
  induction n with d hd,
  simp only [pow_zero],
  exact norm_one_eq_one heq,
  rw [pow_succ, pow_succ, ‚Üêhd, heq],
end

-- the equality at the end of the next lemma
lemma rearrange {p v : ‚Ñù} (m : ‚Ñï) (hp : p > 0) (hlogp : real.log p ‚â† 0) (hv : v > 0) : v ^ m = (p ^ m)‚Åª¬π ^ (-real.log v / real.log p) :=
begin
  rw ‚Üêreal.rpow_neg_one,
  have : p ^ m = p ^ (m : ‚Ñù) := by norm_cast,
  rw [this, ‚Üê(real.rpow_mul (le_of_lt hp)), ‚Üê(real.rpow_mul (le_of_lt hp)), neg_div],
  simp only [mul_neg, mul_one, neg_mul, neg_neg],
  rw [mul_div, ‚Üêreal.log_rpow hv, real.rpow_def_of_pos hp, mul_div_left_comm,
    div_self hlogp, mul_one, real.exp_log],
  { norm_cast },
  norm_cast,
  exact pow_pos hv m,
end

-- f a = (f p)^m = ring_norm a
lemma int_val_eq (harc : is_nonarchimedean f) (heq : mul_eq f) (h_nontriv : f ‚â† 1) :
  ‚àÉ (p : ‚Ñï) [hp : fact (nat.prime p)] (s : ‚Ñù) [hs : s > 0], ‚àÄ (a : ‚Ñ§), f a = (@ring_norm.padic p hp a)^s :=
begin
  obtain ‚ü®p, hp, h_aeq‚ü© := a_eq_prime_ideal harc heq h_nontriv,
  use [p, hp],
  cases hp,
  have fpgt0 := @norm_pos_of_ne_zero f _ (nat.cast_ne_zero.mpr (ne_of_gt hp.pos)),
  have hpgt1 : (p : ‚Ñù) > 1,
  { exact_mod_cast hp.one_lt },
  have hlogp : real.log p > 0 := real.log_pos hpgt1,
  let s := (-real.log (f p : ‚Ñù) / real.log p),
  have hs : s > 0,
  { have fp_lt_one : (f p) < 1, -- prove this through p ‚àà ùîû through h_aeq
    { have p_mem_a : (p : ‚Ñ§) ‚àà ideal.span ({p} : set ‚Ñ§) := by rw ideal.mem_span_singleton,
      rw ‚Üêh_aeq at p_mem_a,
      unfold ùîû at p_mem_a,
      simp only [submodule.mem_mk, set.mem_set_of_eq, int.cast_coe_nat] at p_mem_a,
      exact p_mem_a },
    have hlogfp : real.log (f p) < 0 := (real.log_neg_iff fpgt0).mpr fp_lt_one,
    exact div_pos (neg_pos.mpr hlogfp) hlogp },
  use [s, hs],
  intro a,
  by_cases ha : a = 0,
  { rw ha,
    simp only [int.cast_zero, map_zero],
    have hs' : s ‚â† 0 := norm_num.ne_zero_of_pos s hs,
    exact (real.zero_rpow hs').symm },
  have hfin := mult_finite hp ha,
  obtain ‚ü®b, hapb, hndiv‚ü© := multiplicity.exists_eq_pow_mul_and_not_dvd hfin,
  let m := (multiplicity (p : ‚Ñ§) a).get hfin,
  have : f a = (f p) ^ m,
  { rw hapb,
    have hb : ‚Üëb ‚àâ ùîû harc heq,
    { rw h_aeq,
      intro hmem,
      rw ideal.mem_span_singleton' at hmem,
      obtain ‚ü®k, hk‚ü© := hmem,
      apply hndiv,
      rw dvd_iff_exists_eq_mul_left,
      use k,
      exact hk.symm },
    unfold ùîû at hb,
    simp only [int.cast_id, submodule.mem_mk, set.mem_set_of_eq, not_lt] at hb,
    have h' : f b = 1 := le_antisymm (int_norm_le_one b heq harc) hb,
    have h'' : f ((p : ‚Ñö) ^ m * (b : ‚Ñö)) = (f (p : ‚Ñö)) ^ m,
    { rw [heq, h'],
      rw mul_one,
      exact mul_eq_pow heq },
    convert h'',
    norm_cast,
  },
  rw this,
  simp [ring_norm_eq_padic_norm, ha],
  unfold padic_val_int padic_val_nat,
  simp [ha, hp.ne_one, int.nat_abs_pos_of_ne_zero ha, multiplicity.int.nat_abs p a],
  have hppos : (p : ‚Ñù) > 0 := nat.cast_pos.mpr (hp.pos),
  exact rearrange m hppos (norm_num.ne_zero_of_pos _ hlogp) fpgt0,
end

lemma cast_pow_sub (r : ‚Ñù) (a b : ‚Ñ§) : r ^ (a - b) = r ^ ((a : ‚Ñù) - (b : ‚Ñù)) := by norm_cast

lemma cast_pow (r : ‚Ñù) (a : ‚Ñï) : r ^ a = r ^ (a : ‚Ñù) := by norm_cast

-- Extend this to ‚Ñö using div_eq
lemma rat_val_eq (harc : is_nonarchimedean f) (heq : mul_eq f) (h_nontriv : f ‚â† 1) :
  ‚àÉ (p : ‚Ñï) [hp : fact (nat.prime p)] (s : ‚Ñù) (hs : s > 0), ‚àÄ (a : ‚Ñö), f a = (@ring_norm.padic p hp a)^s :=
begin
  obtain ‚ü®p, hp, s, hs, h_int‚ü© := int_val_eq harc heq h_nontriv,
  use [p, hp, s, hs],
  intro a,
  by_cases ha : a = 0,
  { rw [ha, map_zero, map_zero],
    have hs' : s ‚â† 0 := norm_num.ne_zero_of_pos s hs,
    exact (real.zero_rpow hs').symm },
  have hcast : f (a.denom) = (@ring_norm.padic p hp a.denom) ^ s := h_int a.denom,
  rw [‚Üêrat.num_div_denom a, ring_norm.div_eq heq, h_int, hcast],
  simp [ha],
  unfold padic_val_rat,
  rw [cast_pow_sub, real.rpow_sub],
  unfold padic_norm,
  simp [rat.num_ne_zero_of_ne_zero ha, rat.denom_ne_zero a],
  rw [real.inv_rpow, real.inv_rpow],
  simp only [inv_div_inv],
  rw ‚Üêreal.div_rpow,
  repeat {
    -- fact hp --> hp
    cases hp,
    rw cast_pow,
    exact real.rpow_nonneg_of_nonneg (le_of_lt (nat.cast_pos.mpr hp.pos)) _
  },
  cases hp,
  exact (nat.cast_pos.mpr hp.pos),
  norm_cast,
  exact rat.denom_ne_zero a,
end

-- Finish: hence f and padic are equivalent
lemma f_equiv_padic (harc : is_nonarchimedean f) (heq : mul_eq f) (h_nontriv : f ‚â† 1) : 
 ‚àÉ (p : ‚Ñï) [hp : fact (nat.prime p)], ring_norm.equiv f (@ring_norm.padic p hp) :=
begin
  obtain ‚ü®p, hp, s, hs, h‚ü© := rat_val_eq harc heq h_nontriv,
  use [p, hp, 1 / s],
  refine ‚ü®one_div_pos.mpr hs, _‚ü©,
  ext a,
  rw [h, ‚Üêreal.rpow_mul],
  simp [norm_num.ne_zero_of_pos s hs],
  unfold ring_norm.padic,
  simp only [map_nonneg]
end

end non_archimedean

section archimedean
--Sum inequality
lemma Sum_le (n : ‚Ñï) (Œπ : ‚Ñï ‚Üí ‚Ñö) : f (‚àë i in finset.range n, Œπ i) ‚â§ ‚àë i in finset.range n, f (Œπ i) :=
begin
  induction n with n hn,
  { simp only [finset.range_zero, finset.sum_empty, map_zero] },
  { rw finset.sum_range_succ,
    rw finset.sum_range_succ,
    calc f (‚àë (x : ‚Ñï) in finset.range n, Œπ x + Œπ n)
        ‚â§ f (‚àë i in finset.range n, Œπ i) + f (Œπ n) : f.add_le' _ _
    ... ‚â§ (‚àë i in finset.range n, f (Œπ i)) + f (Œπ n) : add_le_add_right hn _ }
end

--First limit
lemma limit1 {N : ‚Ñù} (hN : 0 < N) : filter.tendsto (Œª n : ‚Ñï, N ^ (1 / (n : ‚Ñù))) filter.at_top (nhds 1) :=
begin
  rw ‚Üêreal.exp_log hN,
  simp_rw [‚Üêreal.exp_mul],
  refine real.tendsto_exp_nhds_0_nhds_1.comp _,
  simp_rw [mul_one_div],
  apply tendsto_const_div_at_top_nhds_0_nat
end

--Second limit
lemma limit2 {c : ‚Ñù} (hc : 0 < c) : filter.tendsto (Œª n : ‚Ñï, (1 + (n : ‚Ñù)*c)^(1 / (n : ‚Ñù))) filter.at_top (nhds 1) :=
begin
  have cne0 : c ‚â† 0 := ne_of_gt hc, 
  have : (Œª n : ‚Ñï, (1+(n : ‚Ñù)*c)^(1 / (n : ‚Ñù))) = (Œª (x : ‚Ñù), x ^ (1 / ((1 / c) * x  + (- 1) / c))) ‚àò (Œª y : ‚Ñù, 1 + c*y) ‚àò coe,
  { ext n, simp, rw mul_add, rw ‚Üêmul_assoc, simp, rw div_eq_mul_inv, rw add_comm c‚Åª¬π, rw add_assoc, rw [neg_mul, one_mul, add_right_neg, add_zero, inv_mul_cancel cne0, one_mul, mul_comm] },
  rw this,
  have : 1 / c ‚â† 0 := one_div_ne_zero cne0,
  refine (tendsto_rpow_div_mul_add 1 (1 / c) (-1 / c) this.symm).comp _,
  have : filter.tendsto (Œª y : ‚Ñù, 1 + c*y) filter.at_top filter.at_top,
  { apply filter.tendsto_at_top_add_const_left,
    apply filter.tendsto.const_mul_at_top hc,
    intros x hx,
    exact hx },
  exact this.comp tendsto_coe_nat_at_top_at_top
end

--Potentially useful
example {c : ‚Ñù} (hc : 0 < c) : filter.tendsto (Œª n : ‚Ñï, ((n : ‚Ñù))^(1 / (n : ‚Ñù))) filter.at_top (nhds 1) :=
begin
  have hf : (Œª n : ‚Ñï, (n : ‚Ñù)^(1 / (n : ‚Ñù))) = Œª n : ‚Ñï, (((Œª x : ‚Ñù, x^(1 / x)) ‚àò coe) n),
  { ext, simp only [eq_self_iff_true] },
  rw hf,
  apply filter.tendsto.comp _ tendsto_coe_nat_at_top_at_top,
  exact tendsto_rpow_div,
  apply_instance,
end

lemma pow_mul_pow_le_max_pow {a b : ‚Ñù} {m n : ‚Ñï} (ha : 0 ‚â§ a) (hb : 0 ‚â§ b) : a^m * b^n ‚â§ max a b ^ (m + n) :=
begin
  rw pow_add,
  apply mul_le_mul,
  { exact pow_le_pow_of_le_left ha (le_max_left a b) m },
  { exact pow_le_pow_of_le_left hb (le_max_right a b) n },
  { exact pow_nonneg hb n },
  { apply pow_nonneg,
    rw le_max_iff,
    left,
    exact ha }
end 

lemma inter_ineq {n : ‚Ñï} (x y : ‚Ñö) (hmul : mul_eq f) (hf : ‚àÄ m : ‚Ñï, f m ‚â§ 1) : f (x + y)^(n : ‚Ñù) ‚â§ (n + 1 : ‚Ñù) * max (f x) (f y)^n :=
begin
  norm_cast,
  rw [‚Üêmul_eq_pow hmul, add_pow],
  apply le_trans (Sum_le (n + 1) _),
  suffices goal_1 : ‚àë i in finset.range (n + 1), f ( x^i * y^(n - i) * (n.choose i) )
    = ‚àë i in finset.range (n + 1), f (x ^ i) * f(y ^ (n - i)) * f (n.choose i),
  { rw goal_1,
    clear goal_1,
    calc ‚àë i in finset.range (n + 1), f (x ^ i) * f(y ^ (n - i)) * f (n.choose i)
        ‚â§ ‚àë i in finset.range (n + 1), f (x ^ i) * f (y ^ (n - i)) : 
          begin
            apply finset.sum_le_sum,
            intros i hi,
            conv { to_rhs, rw ‚Üêmul_one (f (x ^ i) * f (y ^ (n - i))) },
            exact mul_le_mul_of_nonneg_left (hf _) (mul_nonneg (map_nonneg f _) (map_nonneg f _))
          end
    ... ‚â§ ‚àë i in finset.range (n + 1), max (f x) (f y) ^ n : 
          begin
            apply finset.sum_le_sum,
            intros i hi,
            have : i + (n - i) = n,
            { rw add_comm,
              apply nat.sub_add_cancel,
              simp at hi,
              linarith },
            conv { to_rhs, rw ‚Üêthis },
            repeat { rw mul_eq_pow hmul },
            exact pow_mul_pow_le_max_pow (map_nonneg f x) (map_nonneg f y),
          end
    ... = ‚Üë(n + 1) * max (f x) (f y) ^ n : by simp, },
    { congr',
      ext,
      rw [hmul, hmul] }
end

lemma root_ineq {n : ‚Ñï} (x y : ‚Ñö) (hn : n ‚â† 0) (hmul : mul_eq f) (hf : ‚àÄ m : ‚Ñï, f m ‚â§ 1) : f (x + y) ‚â§ (n + 1 : ‚Ñù) ^ (1 / (n : ‚Ñù)) * max (f x) (f y) :=
begin
  refine le_of_pow_le_pow n _ (nat.pos_of_ne_zero hn) _,
  { apply mul_nonneg,
    { apply real.rpow_nonneg_of_nonneg,
      norm_cast,
      linarith },
    { rw le_max_iff,
      left,
      exact map_nonneg f x } },
  { rw mul_pow,
    have : 0 ‚â§ (n : ‚Ñù) + 1 := by { norm_cast, linarith },
    nth_rewrite 1 [‚Üêreal.rpow_nat_cast],
    rw [‚Üêreal.rpow_mul this, one_div],
    have : (n : ‚Ñù) ‚â† 0 := by { norm_cast, exact hn },
    rw [inv_mul_cancel this, real.rpow_one, ‚Üêreal.rpow_nat_cast],
    exact inter_ineq x y hmul hf }
end

-- A norm is non-archimedean iff it's bounded on the naturals
lemma non_archimedean_iff_nat_norm_bound (hmul : mul_eq f) : (‚àÄ n : ‚Ñï, f n ‚â§ 1) ‚Üî is_nonarchimedean f :=
begin
  split,
  { intros H x y,
    have lim : filter.tendsto (Œª n : ‚Ñï, (n + 1 : ‚Ñù) ^ (1 / (n : ‚Ñù)) * max (f x) (f y)) filter.at_top (nhds (max (f x) (f y))),
    { nth_rewrite 0 ‚Üêone_mul (max (f x) (f y)),
      apply filter.tendsto.mul_const (max (f x) (f y)),
      suffices goal_1 : (Œª k : ‚Ñï, ((k : ‚Ñù) + 1) ^ (1 / (k : ‚Ñù))) = (Œª k : ‚Ñï, (1 + (k : ‚Ñù) * 1) ^ (1 / (k : ‚Ñù))),
      { rw goal_1,
        clear goal_1,
        exact limit2 (real.zero_lt_one) },
      { ext k,
        simp,
        rw add_comm } },
    apply ge_of_tendsto lim _,
    simp only [filter.eventually_at_top, ge_iff_le],
    use 1,
    intros b hb, 
    have : b ‚â† 0 := nat.one_le_iff_ne_zero.mp hb,
    exact root_ineq x y this hmul H },
  { intros hf n,
    exact nat_norm_le_one n hmul hf }
end

lemma aux1 {n‚ÇÄ : ‚Ñï} (hf_mul : mul_eq f) (hf : ‚àÉ n : ‚Ñï, 1 < f n) (dn‚ÇÄ : n‚ÇÄ = nat.find hf) : 1 < n‚ÇÄ :=
begin
  have hn‚ÇÄ := nat.find_spec hf,
  rw ‚Üêdn‚ÇÄ at hn‚ÇÄ,
  by_contra',
  rw lt_iff_not_ge at hn‚ÇÄ,
  interval_cases n‚ÇÄ,
  { apply hn‚ÇÄ,
    simp only [nat.cast_zero, map_zero, ge_iff_le, zero_le_one] },
  { apply hn‚ÇÄ,
    simp [norm_one_eq_one hf_mul] }
end

lemma list.map_with_index_append {Œ± M : Type*} [add_comm_monoid M] 
  (K L : list Œ±) (f : ‚Ñï ‚Üí Œ± ‚Üí M) : 
  (K ++ L).map_with_index f = K.map_with_index f ++ L.map_with_index (Œª i a, f (i + K.length) a) :=
begin
  induction K with a J IH generalizing f,
  { simp },
  { simp [IH (Œª i, f (i+1)), add_assoc], }
end

lemma list.map_with_index_sum_to_finset_sum {Œ≤ A : Type*} [add_comm_monoid A] {f : ‚Ñï ‚Üí Œ≤ ‚Üí A} {L : list Œ≤}  [inhabited Œ≤] :
  (L.map_with_index f).sum = ‚àë i in finset.range L.length, f i ((L.nth i).get_or_else default) :=
begin
  apply list.reverse_rec_on L, -- the induction principle which works best
  { simp, },
  { intros M a IH,
    simp [list.map_with_index_append, IH],
    rw finset.sum_range_succ,
    congr' 1,
    { apply finset.sum_congr rfl,
      intros x hx,
      congr' 2,
      rw finset.mem_range at hx,
      rw list.nth_append hx, },
    { simp, } },
end

lemma aux2 {n‚ÇÄ : ‚Ñï} {Œ± : ‚Ñù} (hf_mul : mul_eq f) (hf : ‚àÉ n : ‚Ñï, 1 < f n) 
  (dn‚ÇÄ : n‚ÇÄ = nat.find hf) (dŒ± : Œ± = real.log (f n‚ÇÄ) / real.log n‚ÇÄ) : ‚àÄ n : ‚Ñï, f n ‚â§ n ^ Œ± :=
begin
  intro n,
  have : f n‚ÇÄ = n‚ÇÄ ^ Œ±,
  { rw dŒ±,
    rw real.log_div_log,
    apply eq.symm,
    apply real.rpow_logb,
    { norm_cast,
      exact lt_trans zero_lt_one (aux1 hf_mul hf dn‚ÇÄ) },
    { apply ne_of_gt,
      norm_cast,
      exact aux1 hf_mul hf dn‚ÇÄ },
    { have hn‚ÇÄ := nat.find_spec hf,
      rw ‚Üêdn‚ÇÄ at hn‚ÇÄ,
      exact lt_trans zero_lt_one hn‚ÇÄ } },
  conv_lhs { rw ‚Üênat.of_digits_digits n‚ÇÄ n },
  rw nat.of_digits_eq_sum_map_with_index,
  rw list.map_with_index_sum_to_finset_sum,
  simp,
  apply le_trans (Sum_le (n‚ÇÄ.digits n).length _),
  suffices goal_1 : ‚àë i in finset.range (n‚ÇÄ.digits n).length, f (((((n‚ÇÄ.digits n).nth i).get_or_else default) : ‚Ñö) * (n‚ÇÄ : ‚Ñö) ^ i)
    = ‚àë i in finset.range (n‚ÇÄ.digits n).length, f (((n‚ÇÄ.digits n).nth i).get_or_else default) * (f n‚ÇÄ) ^ i,
  { rw goal_1,
    clear goal_1,
    have coef_ineq : ‚àÄ i : ‚Ñï, f (((n‚ÇÄ.digits n).nth i).get_or_else default) ‚â§ 1,
    { intro i,
      have : ((n‚ÇÄ.digits n).nth i).get_or_else default < n‚ÇÄ,
      { by_cases h : i < (n‚ÇÄ.digits n).length,
        { sorry },
        { sorry } },
      apply le_of_not_gt,
      rw dn‚ÇÄ at this ‚ä¢,
      rw gt_iff_lt,
      exact nat.find_min hf this },
    sorry },
  { congr',
    ext,
    rw [hf_mul, mul_eq_pow hf_mul] }
end

lemma archimedean_case (hf_mul : mul_eq f) (hf : ¬¨ is_nonarchimedean f) : ring_norm.equiv f ring_norm.real :=
begin
  /-rw ‚Üênon_archimedean_iff_nat_norm_bound hf_mul at hf,
  push_neg at hf,
  set n‚ÇÄ := nat.find hf with dn‚ÇÄ,
  have hn‚ÇÄ := nat.find_spec hf,
  rw ‚Üêdn‚ÇÄ at hn‚ÇÄ,
  have n0gt1 : 1 < n‚ÇÄ,
  { by_contra',
    rw lt_iff_not_ge at hn‚ÇÄ,
    interval_cases n‚ÇÄ,
    { apply hn‚ÇÄ,
      simp [h] },
    { apply hn‚ÇÄ,
      simp [h, norm_one_eq_one hf_mul] } },
  use (real.log (f n‚ÇÄ)) / (real.log n‚ÇÄ),
  split,
  { rw div_eq_inv_mul,
    apply right.mul_pos,
    { rw inv_pos,
      exact real.log_pos (by { norm_cast, exact n0gt1 }) },
    { exact real.log_pos hn‚ÇÄ } },
  have lemma1 : ‚àÄ n : ‚Ñï, f n ‚â§ n ^ ((real.log (f n‚ÇÄ)) / (real.log n‚ÇÄ)),
  {  } -/
  sorry
end

end archimedean

/-- Ostrowski's Theorem -/
theorem rat_ring_norm_p_adic_or_real (f : ring_norm ‚Ñö) (hf_nontriv : f ‚â† 1) (hf_mul : mul_eq f) :
  (ring_norm.equiv f ring_norm.real) ‚à®
  ‚àÉ (p : ‚Ñï) [hp : fact (nat.prime p)], ring_norm.equiv f (@ring_norm.padic p hp) :=
begin
    by_cases bdd : ‚àÄ z : ‚Ñ§, f z ‚â§ 1,
    { right, /- p-adic case -/
      rw [‚Üêint_norm_bound_iff_nat_norm_bound hf_mul, non_archimedean_iff_nat_norm_bound hf_mul] at bdd,
      exact f_equiv_padic bdd hf_mul hf_nontriv },
    { sorry /- Euclidean case -/ }
end