/-
Copyright (c) 2022 Jiale Miao. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jiale Miao
-/
import basic
import mul_ring_norm_rat
import rationals

/-!
# Formaliszing Ostrowski's theorem in Lean

This is for presentation only.

-/

section absolute_value

-- Firstly let's look at "absolute value" in Lean.
-- Note that we can't sovle these sorrys as f is very "random".
def my_absolute_value (R : Type) [ring R] (f : R ‚Üí ‚Ñù) : mul_ring_norm R :=
{ to_fun := f,
  map_zero' := sorry,
  add_le' := sorry,
  neg' := sorry,
  map_one' := sorry,
  map_mul' := sorry,
  eq_zero_of_map_eq_zero' := sorry }

-- Let's look at some examples we mentioned early.

--This is the usual absolute value on ‚Ñö, these `sorrys` are doable.
def my_mul_ring_norm.real : mul_ring_norm ‚Ñö :=
{ to_fun := Œª x, |x|,
  map_zero' := by simp only [algebra_map.coe_zero, abs_zero],
  add_le' := sorry,
  neg' := sorry,
  map_one' := sorry,
  map_mul' := sorry,
  eq_zero_of_map_eq_zero' := sorry }

-- This is the p-adic norm on ‚Ñö, these `sorrys` are doable as well.
def my_mul_ring_norm.padic (p : ‚Ñï) [hp : fact (nat.prime p)] : mul_ring_norm ‚Ñö :=
{ to_fun    := Œª x : ‚Ñö, (padic_norm p x: ‚Ñù),
  map_zero' := sorry,
  add_le'   := sorry,
  neg'      := sorry,
  eq_zero_of_map_eq_zero' := sorry,
  map_one' := sorry,
  map_mul' := sorry,
}

end absolute_value

section equiv

-- Here is how do we define the equivalance of two valuations.
def my_equiv {R : Type*} [ring R] (f : mul_ring_norm R) (g : mul_ring_norm R) :=
  ‚àÉ c : ‚Ñù, 0 < c ‚àß (Œª x : R, (f x) ^ c) = g

-- This is actually an equivalance relation.

lemma my_equiv_refl {R : Type*} [ring R] (f : mul_ring_norm R) :
  my_equiv f f := sorry

lemma my_equiv_symm {R : Type*} [ring R] (f g : mul_ring_norm R) (hfg : my_equiv f g) :
  my_equiv g f := sorry

lemma my_equiv_trans {R : Type*} [ring R] (f g k : mul_ring_norm R) 
  (hfg : my_equiv f g) (hgk : my_equiv g k) :
    my_equiv f k := sorry

end equiv

section nonarchimedean

/-- A function `f : Œ± ‚Üí Œ≤` is nonarchimedean if it satisfies the inequality
  `f (a + b) ‚â§ max (f a) (f b)` for all `a, b ‚àà Œ±`. -/
def my_is_nonarchimedean {Œ± : Type*} [has_add Œ±] {Œ≤ : Type*} [linear_order Œ≤] (f : Œ± ‚Üí Œ≤) : Prop :=
‚àÄ r s, f (r + s) ‚â§ max (f r) (f s)

lemma my_is_nonarchimedean_def {Œ± : Type*} [has_add Œ±] {Œ≤ : Type*} [linear_order Œ≤] (f : Œ± ‚Üí Œ≤) :
  my_is_nonarchimedean f ‚Üî ‚àÄ r s, f (r + s) ‚â§ max (f r) (f s) := iff.rfl

end nonarchimedean

variable {f : mul_ring_norm ‚Ñö}

section nonarchimedean_proof

-- Firstly, we want to show it's bounded on all ‚Ñ§
-- but it suffices to consider it's bounded on all ‚Ñï since |-x| = |x|
-- |n| = |1 + 1 + ...| ‚â§ |1| = 1 by the nonarchimedean property
lemma my_int_norm_le_one (harc : my_is_nonarchimedean f) (z : ‚Ñ§) : f z ‚â§ 1 := sorry

-- There is a prime number p such that f p < 1 
-- because, if not, unique prime factorization
-- would imply f x = 1 for all x in ‚Ñö*.
lemma my_ex_prime_norm_lt_one (harc : my_is_nonarchimedean f) 
  (h_nontriv : f ‚â† 1) : ‚àÉ (p : ‚Ñï) [hp : fact (nat.prime p)], f p < 1 := sorry

def my_Œ± (harc : my_is_nonarchimedean f) : ideal ‚Ñ§ :=
{ carrier := {a : ‚Ñ§ | f a < 1},
  add_mem' := sorry,
  zero_mem' := sorry,
  smul_mem' := sorry, }

lemma my_a_contains_prime_ideal (harc : my_is_nonarchimedean f) (h_nontriv : f ‚â† 1) :
  ‚àÉ (p : ‚Ñï) [hp : fact (nat.prime p)], ùîû harc ‚â• ideal.span {p} := sorry

lemma my_a_proper (harc : my_is_nonarchimedean f) : ùîû harc ‚â† (‚ä§ : ideal ‚Ñ§) := sorry

-- Since p‚Ñ§ is a maximal ideal.
lemma my_a_eq_prime_ideal (harc : my_is_nonarchimedean f) (h_nontriv : f ‚â† 1) :
  ‚àÉ (p : ‚Ñï) [hp : fact (nat.prime p)], ùîû harc = ideal.span {p} := sorry

-- if now a ‚àà ‚Ñ§ and a = bp·µê with p ‚à§ b so thta b ‚àà Œ±,
-- then f b = 1 and hence
-- f a = (f p) ^ m = (padic_norm a) ^ s
-- where s = - log (f p) / log p 
lemma my_int_val_eq (harc : my_is_nonarchimedean f) (h_nontriv : f ‚â† 1) :
  ‚àÉ (p : ‚Ñï) [hp : fact (nat.prime p)] (s : ‚Ñù) [hs : s > 0],
    ‚àÄ (a : ‚Ñ§), f a = (@mul_ring_norm.padic p hp a) ^ s := sorry

-- f (p / q) = f p / f q
lemma my_rat_val_eq (harc : my_is_nonarchimedean f) (h_nontriv : f ‚â† 1) :
  ‚àÉ (p : ‚Ñï) [hp : fact (nat.prime p)] (s : ‚Ñù) (hs : s > 0),
    ‚àÄ (a : ‚Ñö), f a = (@mul_ring_norm.padic p hp a) ^ s := sorry

lemma my_nonarchimedean_case (harc : is_nonarchimedean f) (h_nontriv : f ‚â† 1) : 
 ‚àÉ (p : ‚Ñï) [hp : fact (nat.prime p)],
  mul_ring_norm.equiv f (@mul_ring_norm.padic p hp) := sorry

end nonarchimedean_proof

section archimedean_proof

-- ‚àÉ n : ‚Ñï, f n > 1
lemma my_non_archimedean_iff_nat_norm_bound : 
  is_nonarchimedean f ‚Üî (‚àÄ n : ‚Ñï, f n ‚â§ 1) := sorry

-- Let n‚ÇÄ = min{n : ‚Ñï | f n > 1}
variables (hf : ‚àÉ n : ‚Ñï, 1 < f n) {n‚ÇÄ : ‚Ñï} (dn‚ÇÄ : n‚ÇÄ = nat.find hf)

-- f 1 = 1
lemma one_lt_n‚ÇÄ : 1 < n‚ÇÄ := sorry

variables {Œ± : ‚Ñù} (dŒ± : Œ± = real.log (f n‚ÇÄ) / real.log n‚ÇÄ)

-- 1 < n‚ÇÄ and 1 < f n‚ÇÄ
lemma Œ±_pos : 0 < Œ± := sorry

lemma lemma1 {n‚ÇÄ : ‚Ñï} {Œ± : ‚Ñù} (hf : ‚àÉ n : ‚Ñï, 1 < f n) 
  (dn‚ÇÄ : n‚ÇÄ = nat.find hf) (dŒ± : Œ± = real.log (f n‚ÇÄ) / real.log n‚ÇÄ) : 
    ‚àÄ n : ‚Ñï, f n ‚â§ n ^ Œ± := sorry

lemma lemma2 {n‚ÇÄ : ‚Ñï} {Œ± : ‚Ñù} (hf : ‚àÉ n : ‚Ñï, 1 < f n) 
  (dn‚ÇÄ : n‚ÇÄ = nat.find hf) (dŒ± : Œ± = real.log (f n‚ÇÄ) / real.log n‚ÇÄ) : 
    ‚àÄ n : ‚Ñï, (n ^ Œ± : ‚Ñù) ‚â§ f n := sorry

lemma my_archimedean_case (hf : ¬¨ is_nonarchimedean f) : 
  mul_ring_norm.equiv f mul_ring_norm.real := sorry

end archimedean_proof

/-- Ostrowski's Theorem -/
theorem ostrowski (f : mul_ring_norm ‚Ñö) (hf_nontriv : f ‚â† 1) :
  (mul_ring_norm.equiv f mul_ring_norm.real) ‚à®
  ‚àÉ (p : ‚Ñï) [hp : fact (nat.prime p)],
    mul_ring_norm.equiv f (@mul_ring_norm.padic p hp) :=
begin
    by_cases bdd : ‚àÄ z : ‚Ñï, f z ‚â§ 1,
    { right, /- p-adic case -/
      rw ‚Üê my_non_archimedean_iff_nat_norm_bound at bdd,
      exact my_nonarchimedean_case bdd hf_nontriv },
    { left,
      rw ‚Üê my_non_archimedean_iff_nat_norm_bound at bdd,
      exact my_archimedean_case bdd, /- Euclidean case -/ }
end